resources:
  - name: factorio-repo
    type: gitRepo
    integration: "trriplejay github"
    versionTemplate:
      sourceName: SoftSrv/factorio
      branch: master

  - name: factorio-slack
    type: notification
    integration: factorio-slack
    versionTemplate:
      recipients:
        - "#factorio"

  - name: factorio-timer
    type: time
    versionTemplate:
      interval: "0 */2 * * *"

  - name: digitalocean-creds
    type: integration
    integration: digitalocean-creds
    
  - name: factorio-do-keys
    type: integration
    integration: factorio-do-keys
    
  - name: factorio-trigger
    type: notification
    integration: factorio-trigger
    
  - name: factorio-hook
    type: webhook
    versionTemplate:
      webhookKey: four-fluffy-feathers-on-a-fiffer-feffer-fef

jobs:
  - name: factorio-idlechecker
    type: runSh
    allowPublicAccess: true
    steps:
      - IN: digitalocean-creds
      - IN: factorio-do-keys
      - IN: factorio-slack
      - IN: factorio-timer
      - IN: factorio-trigger
      - IN: factorio-controller
        switch: off
      - IN: factorio-repo
        switch: off
      - TASK:
          name: idlechecker
          runtime:
            options:
              env:
                REPORT_ONLY: true
          script:
            - pushd $(shipctl get_resource_state factorio-repo)
            - source send_msg.sh
            - echo "hello world. report only is $REPORT_ONLY"
            - send_msg "checking server state..."
            
            
  - name: factorio-controller
    type: runSh
    allowPublicAccess: true
    steps:
      - IN: digitalocean-creds
      - IN: factorio-hook
      - IN: factorio-repo
        switch: off
      - IN: factorio-slack
      - TASK:
          name: cycle-do-box
          runtime:
            options:
              env:
                - fVersion: "0.16"
                - snapshotName: "factorio-ss"
                - snapshotId: ""
                - region: sfo2
                - size: s-1vcpu-2gb
                - skip: ""

          script:
            - pushd $(shipctl get_resource_state factorio-repo)
            - source send_msg.sh
            - echo "starting..."
            - shipctl copy_file_from_prev_state state.env .
            - if [ -f "state.env" ]; then source state.env; fi
            - >
              if [ "$JOB_TRIGGERED_BY_NAME" == "factorio-hook" ]; then
                HOOK_META=$(shipctl get_resource_meta factorio-hook)
                export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
                export slack_user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
                if [ "$message" == "start" ] && [ -z $snapshotId ]; then
                  ls
                  send_msg "Skipping start. The server should already be running."
                  #slack_text=
                  #echo "{\"text\":\"$slack_text\",\"channel\":\"@trriplejay\"}" > payload.json
                  #shipctl notify factorio-slack -payload payload.json
                  #./respond.sh "Skipping start. The server should already be running."
                  skip=true
                elif [ "$message" == "stop" ] && [ -z $dropletId ]; then
                  send_msg "Skipping stop. The server is already stopped."
                  skip=true
                elif [ "$message" != "stop" ] && [ "$message" != "start" ]; then
                  send_msg "Bad command '$message'. only 'start' or 'stop' are accepted"
                  skip=true
                else
                  send_msg "$message action initiated by $slack_user"
                fi
              elif [ "$FORCE_ACTION" == "rebuild" ]; then
                send_msg "Rebuild has been forced."
                echo "forcing rebuild from snapshotId $init_snapshotId"
                export snapshotId="$init_snapshotId"
                export dropletId=""
              elif [ "$FORCE_ACTION" == "destroy" ]; then
                send_msg "Destroy has been forced."
                echo "forcing destruction of dropletId $init_dropletId"
                export snapshotId=""
                export dropletId="$init_dropletId"
              elif [ "$FORCE_ACTION" == "reset" ]; then
                send_msg "Forcing state reset. No action will be taken on the droplet."
                echo "export snapshotId=\"$init_snapshotId\"" > state.env
                echo "export dropletId=\"$init_dropletId\"" >> state.env
                shipctl copy_file_to_state state.env
                skip=true
              fi
            
            - if [ -z "$skip" ]; then ./cycle.sh; fi
            - if [ -n "$skip" ]; then shipctl copy_file_from_prev_state state.env $JOB_STATE; fi
    on_failure:
      script:
        - send_msg "An error occured. see <$BUILD_URL|here> for more details" 
        - shipctl copy_file_from_prev_state state.env $JOB_STATE       
            
            
